// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/task_service.proto
// </auto-generated>
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace TaskManager.Shared.Grpc {
  /// <summary>
  /// Serviciul gRPC pentru comunicarea între API și Scheduler
  /// </summary>
  public static partial class TaskService
  {
    static readonly string __ServiceName = "taskmanager.TaskService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::TaskManager.Shared.Grpc.CreateTaskGrpcRequest> __Marshaller_taskmanager_CreateTaskGrpcRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TaskManager.Shared.Grpc.CreateTaskGrpcRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::TaskManager.Shared.Grpc.TaskGrpcResponse> __Marshaller_taskmanager_TaskGrpcResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TaskManager.Shared.Grpc.TaskGrpcResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::TaskManager.Shared.Grpc.UpdateTaskGrpcRequest> __Marshaller_taskmanager_UpdateTaskGrpcRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TaskManager.Shared.Grpc.UpdateTaskGrpcRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::TaskManager.Shared.Grpc.UpdateTaskGrpcResponse> __Marshaller_taskmanager_UpdateTaskGrpcResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TaskManager.Shared.Grpc.UpdateTaskGrpcResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::TaskManager.Shared.Grpc.DeleteTaskGrpcRequest> __Marshaller_taskmanager_DeleteTaskGrpcRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TaskManager.Shared.Grpc.DeleteTaskGrpcRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::TaskManager.Shared.Grpc.DeleteTaskGrpcResponse> __Marshaller_taskmanager_DeleteTaskGrpcResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TaskManager.Shared.Grpc.DeleteTaskGrpcResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::TaskManager.Shared.Grpc.GetAllTasksGrpcRequest> __Marshaller_taskmanager_GetAllTasksGrpcRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TaskManager.Shared.Grpc.GetAllTasksGrpcRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::TaskManager.Shared.Grpc.GetAllTasksGrpcResponse> __Marshaller_taskmanager_GetAllTasksGrpcResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TaskManager.Shared.Grpc.GetAllTasksGrpcResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::TaskManager.Shared.Grpc.GetRunningTasksGrpcRequest> __Marshaller_taskmanager_GetRunningTasksGrpcRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TaskManager.Shared.Grpc.GetRunningTasksGrpcRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::TaskManager.Shared.Grpc.GetRunningTasksGrpcResponse> __Marshaller_taskmanager_GetRunningTasksGrpcResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::TaskManager.Shared.Grpc.GetRunningTasksGrpcResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::TaskManager.Shared.Grpc.CreateTaskGrpcRequest, global::TaskManager.Shared.Grpc.TaskGrpcResponse> __Method_CreateTask = new grpc::Method<global::TaskManager.Shared.Grpc.CreateTaskGrpcRequest, global::TaskManager.Shared.Grpc.TaskGrpcResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateTask",
        __Marshaller_taskmanager_CreateTaskGrpcRequest,
        __Marshaller_taskmanager_TaskGrpcResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::TaskManager.Shared.Grpc.UpdateTaskGrpcRequest, global::TaskManager.Shared.Grpc.UpdateTaskGrpcResponse> __Method_UpdateTask = new grpc::Method<global::TaskManager.Shared.Grpc.UpdateTaskGrpcRequest, global::TaskManager.Shared.Grpc.UpdateTaskGrpcResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateTask",
        __Marshaller_taskmanager_UpdateTaskGrpcRequest,
        __Marshaller_taskmanager_UpdateTaskGrpcResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::TaskManager.Shared.Grpc.DeleteTaskGrpcRequest, global::TaskManager.Shared.Grpc.DeleteTaskGrpcResponse> __Method_DeleteTask = new grpc::Method<global::TaskManager.Shared.Grpc.DeleteTaskGrpcRequest, global::TaskManager.Shared.Grpc.DeleteTaskGrpcResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteTask",
        __Marshaller_taskmanager_DeleteTaskGrpcRequest,
        __Marshaller_taskmanager_DeleteTaskGrpcResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::TaskManager.Shared.Grpc.GetAllTasksGrpcRequest, global::TaskManager.Shared.Grpc.GetAllTasksGrpcResponse> __Method_GetAllTasks = new grpc::Method<global::TaskManager.Shared.Grpc.GetAllTasksGrpcRequest, global::TaskManager.Shared.Grpc.GetAllTasksGrpcResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAllTasks",
        __Marshaller_taskmanager_GetAllTasksGrpcRequest,
        __Marshaller_taskmanager_GetAllTasksGrpcResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::TaskManager.Shared.Grpc.GetRunningTasksGrpcRequest, global::TaskManager.Shared.Grpc.GetRunningTasksGrpcResponse> __Method_GetRunningTasks = new grpc::Method<global::TaskManager.Shared.Grpc.GetRunningTasksGrpcRequest, global::TaskManager.Shared.Grpc.GetRunningTasksGrpcResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetRunningTasks",
        __Marshaller_taskmanager_GetRunningTasksGrpcRequest,
        __Marshaller_taskmanager_GetRunningTasksGrpcResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::TaskManager.Shared.Grpc.TaskServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of TaskService</summary>
    [grpc::BindServiceMethod(typeof(TaskService), "BindService")]
    public abstract partial class TaskServiceBase
    {
      /// <summary>
      /// Operațiuni CRUD pentru task-uri
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::TaskManager.Shared.Grpc.TaskGrpcResponse> CreateTask(global::TaskManager.Shared.Grpc.CreateTaskGrpcRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::TaskManager.Shared.Grpc.UpdateTaskGrpcResponse> UpdateTask(global::TaskManager.Shared.Grpc.UpdateTaskGrpcRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::TaskManager.Shared.Grpc.DeleteTaskGrpcResponse> DeleteTask(global::TaskManager.Shared.Grpc.DeleteTaskGrpcRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::TaskManager.Shared.Grpc.GetAllTasksGrpcResponse> GetAllTasks(global::TaskManager.Shared.Grpc.GetAllTasksGrpcRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::TaskManager.Shared.Grpc.GetRunningTasksGrpcResponse> GetRunningTasks(global::TaskManager.Shared.Grpc.GetRunningTasksGrpcRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for TaskService</summary>
    public partial class TaskServiceClient : grpc::ClientBase<TaskServiceClient>
    {
      /// <summary>Creates a new client for TaskService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public TaskServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for TaskService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public TaskServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected TaskServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected TaskServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Operațiuni CRUD pentru task-uri
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::TaskManager.Shared.Grpc.TaskGrpcResponse CreateTask(global::TaskManager.Shared.Grpc.CreateTaskGrpcRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateTask(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Operațiuni CRUD pentru task-uri
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::TaskManager.Shared.Grpc.TaskGrpcResponse CreateTask(global::TaskManager.Shared.Grpc.CreateTaskGrpcRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateTask, null, options, request);
      }
      /// <summary>
      /// Operațiuni CRUD pentru task-uri
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::TaskManager.Shared.Grpc.TaskGrpcResponse> CreateTaskAsync(global::TaskManager.Shared.Grpc.CreateTaskGrpcRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateTaskAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Operațiuni CRUD pentru task-uri
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::TaskManager.Shared.Grpc.TaskGrpcResponse> CreateTaskAsync(global::TaskManager.Shared.Grpc.CreateTaskGrpcRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateTask, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::TaskManager.Shared.Grpc.UpdateTaskGrpcResponse UpdateTask(global::TaskManager.Shared.Grpc.UpdateTaskGrpcRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateTask(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::TaskManager.Shared.Grpc.UpdateTaskGrpcResponse UpdateTask(global::TaskManager.Shared.Grpc.UpdateTaskGrpcRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateTask, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::TaskManager.Shared.Grpc.UpdateTaskGrpcResponse> UpdateTaskAsync(global::TaskManager.Shared.Grpc.UpdateTaskGrpcRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateTaskAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::TaskManager.Shared.Grpc.UpdateTaskGrpcResponse> UpdateTaskAsync(global::TaskManager.Shared.Grpc.UpdateTaskGrpcRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateTask, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::TaskManager.Shared.Grpc.DeleteTaskGrpcResponse DeleteTask(global::TaskManager.Shared.Grpc.DeleteTaskGrpcRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteTask(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::TaskManager.Shared.Grpc.DeleteTaskGrpcResponse DeleteTask(global::TaskManager.Shared.Grpc.DeleteTaskGrpcRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteTask, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::TaskManager.Shared.Grpc.DeleteTaskGrpcResponse> DeleteTaskAsync(global::TaskManager.Shared.Grpc.DeleteTaskGrpcRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteTaskAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::TaskManager.Shared.Grpc.DeleteTaskGrpcResponse> DeleteTaskAsync(global::TaskManager.Shared.Grpc.DeleteTaskGrpcRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteTask, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::TaskManager.Shared.Grpc.GetAllTasksGrpcResponse GetAllTasks(global::TaskManager.Shared.Grpc.GetAllTasksGrpcRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAllTasks(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::TaskManager.Shared.Grpc.GetAllTasksGrpcResponse GetAllTasks(global::TaskManager.Shared.Grpc.GetAllTasksGrpcRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAllTasks, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::TaskManager.Shared.Grpc.GetAllTasksGrpcResponse> GetAllTasksAsync(global::TaskManager.Shared.Grpc.GetAllTasksGrpcRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAllTasksAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::TaskManager.Shared.Grpc.GetAllTasksGrpcResponse> GetAllTasksAsync(global::TaskManager.Shared.Grpc.GetAllTasksGrpcRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAllTasks, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::TaskManager.Shared.Grpc.GetRunningTasksGrpcResponse GetRunningTasks(global::TaskManager.Shared.Grpc.GetRunningTasksGrpcRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRunningTasks(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::TaskManager.Shared.Grpc.GetRunningTasksGrpcResponse GetRunningTasks(global::TaskManager.Shared.Grpc.GetRunningTasksGrpcRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetRunningTasks, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::TaskManager.Shared.Grpc.GetRunningTasksGrpcResponse> GetRunningTasksAsync(global::TaskManager.Shared.Grpc.GetRunningTasksGrpcRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRunningTasksAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::TaskManager.Shared.Grpc.GetRunningTasksGrpcResponse> GetRunningTasksAsync(global::TaskManager.Shared.Grpc.GetRunningTasksGrpcRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetRunningTasks, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override TaskServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new TaskServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(TaskServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_CreateTask, serviceImpl.CreateTask)
          .AddMethod(__Method_UpdateTask, serviceImpl.UpdateTask)
          .AddMethod(__Method_DeleteTask, serviceImpl.DeleteTask)
          .AddMethod(__Method_GetAllTasks, serviceImpl.GetAllTasks)
          .AddMethod(__Method_GetRunningTasks, serviceImpl.GetRunningTasks).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, TaskServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_CreateTask, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::TaskManager.Shared.Grpc.CreateTaskGrpcRequest, global::TaskManager.Shared.Grpc.TaskGrpcResponse>(serviceImpl.CreateTask));
      serviceBinder.AddMethod(__Method_UpdateTask, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::TaskManager.Shared.Grpc.UpdateTaskGrpcRequest, global::TaskManager.Shared.Grpc.UpdateTaskGrpcResponse>(serviceImpl.UpdateTask));
      serviceBinder.AddMethod(__Method_DeleteTask, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::TaskManager.Shared.Grpc.DeleteTaskGrpcRequest, global::TaskManager.Shared.Grpc.DeleteTaskGrpcResponse>(serviceImpl.DeleteTask));
      serviceBinder.AddMethod(__Method_GetAllTasks, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::TaskManager.Shared.Grpc.GetAllTasksGrpcRequest, global::TaskManager.Shared.Grpc.GetAllTasksGrpcResponse>(serviceImpl.GetAllTasks));
      serviceBinder.AddMethod(__Method_GetRunningTasks, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::TaskManager.Shared.Grpc.GetRunningTasksGrpcRequest, global::TaskManager.Shared.Grpc.GetRunningTasksGrpcResponse>(serviceImpl.GetRunningTasks));
    }

  }
}
#endregion
